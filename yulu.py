# -*- coding: utf-8 -*-
"""yulu.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-iELcbj1rzXbWF1nHxkDm48r4jhg8ZbW
"""

import datetime
import math
import streamlit as st
import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

url = "https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/001/428/original/bike_sharing.csv?1642089089"
df_yulu = pd.read_csv(url)

st.write("""
            # Yulu bikes data """)

## get data for Yulu bikes
col1, col2 = st.columns(2)
with col1:
    s = st.selectbox(
        'Which season do you want to select?',
            (1, 2, 3, 4))
with col2:
    w = st.selectbox(
        'Which weather do you want to select?',
            (1, 2, 3, 4))
if s == 1:
    season='spring'
elif s == 2:
    season='summer'
elif s == 3:
    season = 'fall'
elif s == 4:
    season = 'winter'
if w == 1:
    weather='clear sky and partial cloudy'
elif w == 2:
    weather='Misty'
elif w == 3:
    weather = 'Light Rain or Snow'
elif w == 4:
    weather = 'Heavy rain or snow'
st.write(f"""
    ###  Season {season} and weather {weather} data for - renting of Yulu bikes: """)

total_count_by_weather_season=df_yulu.groupby(['weather', 'season'])[['count', 'registered', 'casual']].sum().reset_index()

df=total_count_by_weather_season[ (total_count_by_weather_season['season'] == s) & (total_count_by_weather_season['weather'] == w) ]

#print the filtered dataframe
st.dataframe(df)

df_t=df_yulu[ (df_yulu['season'] == s) & (df_yulu['weather'] == w) ]
#Detect outliers using boxplot(Univariate Analysis)
fig, axis= plt.subplots(3, 2, figsize=(13,12))
sns.histplot(df_t['humidity'], kde=True, ax=axis[0,0], color='r')
sns.histplot(df_t['temp'], kde=True, ax=axis[0,1], color='b')
sns.histplot(df_t['atemp'], kde=True, ax=axis[1,0], color='g')
sns.histplot(df_t['windspeed'], kde=True, ax=axis[1,1], color='r')
sns.histplot(df_t["registered"], kde=True, ax=axis[2,0], color='b')
sns.histplot(df_t["casual"], kde=True, ax=axis[2,1], color='r')
plt.show()
st.pyplot(fig)

st.write(f""" 
    INSIGHT:
    1. Neither 'registered' or 'casual' users data follow gaussian distribution.
    2. 'humidity' or 'temp' follow somewhat of a typical distribution, although they too can't be considered normal just by looking at the visual charts.""")

#Detect outliers using boxplot(Univariate Analysis)
fig, axis= plt.subplots(3, 2, figsize=(13,10))
#sns.boxplot(data=df_t, x="count", orient='h', ax=axis[0,0], color='r')
sns.boxplot(data=df_t, x="registered", orient='h', ax=axis[0,0], color='r')
sns.boxplot(data=df_t, x="casual", orient='h', ax=axis[0,1], color='r')
sns.boxplot(data=df_t, x="temp", orient='h', ax=axis[1,0], color='b')
sns.boxplot(data=df_t, x="atemp", orient='h', ax=axis[1,1], color='b')
sns.boxplot(data=df_t, x="humidity", orient='h', ax=axis[2,0], color='g')
sns.boxplot(data=df_t, x="windspeed", orient='h', ax=axis[2,1], color='g')
plt.show()
st.pyplot(fig)
st.write(f"""
    INSIGHT:
    1. 'Windspeed' has many outlier values, whereas 'humidity' has a few.
    2. 'temp' and 'atemp' dont seem to have any outliers.
    3. 'count', 'registered', 'casual' also have a lot of outlier values.""")

# Time range --> minimum and maximum values in the 'datetime' column
df_yulu['datetime'] = pd.to_datetime(df_yulu['datetime'])
df_time = df_yulu
#Add Month and MonthandYear columns to a new dataframe df_time
df_time['Month'] = df_yulu['datetime'].dt.month
df_time['MonthandYear'] = df_yulu['datetime'].dt.to_period('M').astype('string')

#Lineplot for time analysis
fig, axis= plt.subplots(1, 1, figsize=(13,12))
plt.legend(["Total Users", "Registered Users", "Casual Users"], loc = 'upper left', frameon = True)
sns.lineplot(data=df_time, x='MonthandYear', y='count', color='r')
sns.lineplot(data=df_time, x='MonthandYear', y='registered', color='g')
sns.lineplot(data=df_time, x='MonthandYear', y='casual', color='b')
plt.xticks(rotation = 90, fontsize = 8)
plt.ylabel("Count of cycles rented" , fontsize = 10)
plt.grid()
plt.show()
st.pyplot(fig)

st.write(f"""
    INSIGHT:
    There is clear seasonality in demand for Yulu bikes around the year.
        1. The demand for Yulu bikes is pretty low in the beginning of year from where it starts rising before it peaks in June / July.
        2. From July to the end of year, it goes down somewhat.""")


